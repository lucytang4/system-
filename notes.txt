ren12/13
Aim: A pipe by any other name

Named Pipes

   Also known as FIFOs

   Same as unnamed pipes except FIFOs have a name that can be used to identify them via different programs

   Like unnamed pipes, FIFOs are unidirectional

   mkfifo

      Shell command to make a FIFO

      $ mkfifo <pipe name>

   mkfifo - <sys/types.h> <sys/stat.h>

      c function to create a FIFO

      Returns 0 on success and -1 on failure

      Once created, the FIFO acts like a regular file, and we can use open, read, write, and close on it

      mkfifo(<name>, <permissions>)

      FIFOs will block on open until both ends of the pipe have a connection
      
12/14
Aim: Always remember to tip your servers

Server/Client Program Paradigms
   
   Handshake

      A procedure to ensure that a connection has been established

      Both ends of the connection must verify that they can send and receive data to and from each other

      Basic Handshake Procedure:

         1) Server creates a FIFO (Well Known Pipe)

         2) Server waits for a connection

         3) Client creates a "private" FIFO

         4) Client connects to server and sends the private FIFO name

         5) Client waits for a message from the server

         6) Server receives client's message and removes the WKP

         7) Server connects to client FIFO, sending an intial acknowledgement message

         8) Client receives server's message, removes its private FIFO 

12/20
Aim: Cisco in an hour

Do Now: What is needed in order for 2 computers to communicate with each other?
Identification, Physical Connection, Send/Recieve Data, Security, Data Packaging/Message Composition, Connection Verification, User Interaction

OSI 7-Layer Model

   Used to help conceptualize the different parts of network connections

   The top layer is the most concrete, with each subsequent layer becoming more abstract (relying less on the physical connections and more on code)

   The Layers

      1. Physical

      2. Data Link

      3. Network

      4. Transport

      5. Session

      6. Presentation

      7. Application

   If you are working on a particular layer, you should not have to think too much about the other layers

Physical Layer

   How computers are physically connected

   Things like electrons running across wires, radio signals pulsing through the air...

   A brief history of wired connections

      Thicknet

         A single Coaxial cable runs throughout the network, "vampire taps" go into the cable and leech the data out

      Thinnet

         A single Coaxial cable runs throughout the network, T-Junctions used to splice connections

      In Thicknet and Thinnet, all data is sent to all computers

      Each computer added increases the power drain on the entire system, degrading service

12/21
Aim: Cisco in an hour Part II: Electric Boogaloo

   Token Ring

      Each computer is connected in a ring to each other

      Only one computer has command of network resources at a time. This is called "having the token"

      The network sends a "token" throughout the ring, which contains the identity of the computer allowed to use the network. All other computers must wait to use the network

      No possibility of collisions

   Ethernet

      Multiple computers connect to a single hub or switch

      Hub

         Broadcasts the data to all computers

      Switch

         Sends data to a specific computer

      The more computers you add to an ethernet network the greater the chance of collisions

Data Link Layer

   Point-to-point transmission between devices on the same local network

   Ethernet Connections:

      Each device is given a unique 6-Byte MAC (Media Access Control) address, this is set on each network card when it is made 

12/22
Aim: Cisco in an hour III: In 3-D!

      Data is packaged into frames

         Ethernet Frame:

            <prefix><dest><source><...><data><checksum>
	       8B     6B     6B    6B  46-1500B  4B

            prefix: 10101010 X7 + 10101011

            destination/source: MAC addresses

            ...: Information about frame type

            checksum: to ensure data integrity

         MTU

            Maximum Transmission Unit

            1500 Bytes for ethernet

1/3
Aim: Cisco in an hour IV: A New Hope

Network Layer

   Transmission of data between two separate networks

   Is not concerned with whether or not data was sent successfully (connectionless)

   Major features of this layer are addressing, routing, and packet fowarding

   IP (internet protocol) addresses

      IPv4: 4 byte address

         [0-255].[0-255].[0-255].[0-255]

      Routing is made easier by having IP addresses distributed in blocks

1/4
Aim: Cisco in an hour Part V: V for Vendetta

Network Layer

   blah


    Data is broken into packets (IPv4)
        header info: packet type (IPv4/6), header length...
        fragment info: full payloads may be broken up, this will have total # of fragments, which fragment...
        time-to-live: max # of hops before the packet dies
        protocol: TCP/UDP/...
        header checksum: checksum of header bytes (exclude source/dest)
        source and destination: IP addesses
        ...: optional information depending on protocol, type etc
    IPv6
        Problem with IPv4 is that we are running out of usable IPv4 IP addresses
        Biggest difference is the address space goes from 2^32 --> 2^128
        Addresses are written as 8 groups of 4 hexadecimal digits
            87ab : 301c : a45d : 2143 : ff87 : abcd : dead : feed
            leading 0s are ignored, consecutive 0-groups can be replaced with ::, but only once in an address
            :: ffff : 149.89.150.100
        smallest range of IPv6 is equivalent to an IPv4 IP addresss
        Jumbograms
            Increases the MTU to ~4.3 billion (2^32)
        Other improvements in IPv6 make the protocol incompatible with IPv4.


1/5
Aim: Cisco in an hour VI: The Undiscovered Country

Transport Layer

   Computer to computer connection over a network

   Unconcerned with the individual hops of layer 3 traffic

   Each destination address has multiple ports

      65,535 ports

      Each port corresponds to a particular service

      ports < 1024 are well known, reserved ports

      Regulated by the Internet Assigned Numbers Authority (IANA)

   TCP

      Transmission Control Protol

      Reliable connection

      Guarantees delivery of data

      Data is considered a continuous stream that arrives in the order it is sent (which may not be true in the network layer)

      Connections are established using a 3-way handshake

         Server "binds" to a port and waits

         1. Client sends a SYN message to the server

         2. Server sends the client a SYN_ACK message

         3. Client sends an ACK message to the server

   UDP

      User Data Protocol

      Does not require an explicit connection

      Data is sent as discrete datagrams with a set size (as opposed to a continuous stream)

      Datagrams may be dropped or received out of order

      Assumes that any kind of error checking is handled at a later level

1/6
Aim: Cisco in an Hour VII: Adrian's Revenge

Remaining Layers

   5. Session

   6. Presentation

   7. Application

   These layers are incorporated into programs that use network connections

   Session layer represents end-to-end connections in a program (sockets)

   Presentation layer represents how programs package transmitted data

   Application layer represents the programs that users interact with

Sockets (sys/socket.h, sys/types.h)

   A socket is a connection between two computers created programatically

   A socket has 2 ends, each one consisting of an IP Address/Port pair

   To use a socket

      1. Create the socket

      2. Bind it to an address and port

      3. Listen/initiate a connection

      4. Send/receive data

   socket <sys/sockhet.h>

      Creates a socket

      Returns the socket descriptor (int that works like a file descriptor)

      socket(<domain>,<type>,<protocol>)

         domain: type of address, IPv4, IPv6...

                 AF_INET: IPv4

         type: tcp/udp

               SOCK_STREAM: tcp

               SOCK_DGRAM: udp

         protocol

            Combination of domain and type settings

            If set to 0 the OS will set to correct protocol

         example: int sd = socket(AF_INET,SOCK_STREAM,0)

      bind <sys/socket.h>

         Binds the socket to an address and port

         Returns 0 (success) or -1 (failure)

         A server might bind to any incoming address but only a specific port, whereas a client would bind to a specific address and port

         bind(<socket descriptor>,<address>,<address length>)

            socket descriptor: return value of socket

            address: pointer to a struct sockaddr_in

               sin_family: address domain (eg. AF_INET)

               sin_addr:

                  IP address in binary

                     sin_addr.s_addr = INADDR_ANY;//any lcoal IP address

                  INADDR_ANY: Any incoming connection

                  inet_aton(<string>,<address variable>)

                     <arpa/inet.h>

                     Will convert a string representing an ip address to the correct format and place it in the second parameter

1/10
Aim: Socket to me

               sin_port

                  htons(int)

                     Returns the port in the correct order

                     big endian: most significant byte first

      listen (server only) <sys/socket.h>

         TCP server will listen to a socket and wait for an incoming connection

         listen (<socket descriptor>,<queue>)

            socket descriptor: return value of socket

            queue = number of connections that can wait, doesn't work anymore

         listen(sd,1);

         returns - or -1 on failure

      accept (server only) <sys/socket.h>

         Set up a tcp connection

         Handles the require 3-way handshake

         A complete socket ahs 5 pieces of information, IP address and port number for both the client and server, and protocol (tcp/udp)

         Once a client connection gets past listen(), accept creates a new socket with the client information added, and returns a descriptor to the new socket

	 returns the socket descriptor of the new socket

         accept (<socket descriptor>,<socket address>,<address length>)

            socket descriptor: return value of socket

            address: pointer to a struct sockaddr (we will be using sockaddr_in)

                     will contain the correct address information after the connection is made

            length: pointer to a variable with the size of the address

                    will be set after the connection is made

1/11
Aim: Get more power from your sockets

     connect (client only) <sys/socket.h> <sys/types.h>

        Connect to another program over a socket

	Handles the client end of the 3 way handshake

	connect(<socket descriptor>,<address>,<address size>)

	   address struct is the same as in bind




