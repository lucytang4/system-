12/13
Aim: A pipe by any other name

Named Pipes

   Also known as FIFOs

   Same as unnamed pipes except FIFOs have a name that can be used to identify them via different programs

   Like unnamed pipes, FIFOs are unidirectional

   mkfifo

      Shell command to make a FIFO

      $ mkfifo <pipe name>

   mkfifo - <sys/types.h> <sys/stat.h>

      c function to create a FIFO

      Returns 0 on success and -1 on failure

      Once created, the FIFO acts like a regular file, and we can use open, read, write, and close on it

      mkfifo(<name>, <permissions>)

      FIFOs will block on open until both ends of the pipe have a connection
      
12/14
Aim: Always remember to tip your servers

Server/Client Program Paradigms
   
   Handshake

      A procedure to ensure that a connection has been established

      Both ends of the connection must verify that they can send and receive data to and from each other

      Basic Handshake Procedure:

         1) Server creates a FIFO (Well Known Pipe)

         2) Server waits for a connection

         3) Client creates a "private" FIFO

         4) Client connects to server and sends the private FIFO name

         5) Client waits for a message from the server

         6) Server receives client's message and removes the WKP

         7) Server connects to client FIFO, sending an intial acknowledgement message

         8) Client receives server's message, removes its private FIFO 

12/20
Aim: Cisco in an hour

Do Now: What is needed in order for 2 computers to communicate with each other?
Identification, Physical Connection, Send/Recieve Data, Security, Data Packaging/Message Composition, Connection Verification, User Interaction

OSI 7-Layer Model

   Used to help conceptualize the different parts of network connections

   The top layer is the most concrete, with each subsequent layer becoming more abstract (relying less on the physical connections and more on code)

   The Layers

      1. Physical

      2. Data Link

      3. Network

      4. Transport

      5. Session

      6. Presentation

      7. Application

   If you are working on a particular layer, you should not have to think too much about the other layers

Physical Layer

   How computers are physically connected

   Things like electrons running across wires, radio signals pulsing through the air...

   A brief history of wired connections

      Thicknet

         A single Coaxial cable runs throughout the network, "vampire taps" go into the cable and leech the data out

      Thinnet

         A single Coaxial cable runs throughout the network, T-Junctions used to splice connections

      In Thicknet and Thinnet, all data is sent to all computers

      Each computer added increases the power drain on the entire system, degrading service

12/21
Aim: Cisco in an hour Part II: Electric Boogaloo

   Token Ring

      Each computer is connected in a ring to each other

      Only one computer has command of network resources at a time. This is called "having the token"

      The network sends a "token" throughout the ring, which contains the identity of the computer allowed to use the network. All other computers must wait to use the network

      No possibility of collisions

   Ethernet

      Multiple computers connect to a single hub or switch

      Hub

         Broadcasts the data to all computers

      Switch

         Sends data to a specific computer

      The more computers you add to an ethernet network the greater the chance of collisions

Data Link Layer

   Point-to-point transmission between devices on the same local network

   Ethernet Connections:

      Each device is given a unique 6-Byte MAC (Media Access Control) address, this is set on each network card when it is made 

12/22
Aim: Cisco in an hour III: In 3-D!

      Data is packaged into frames

         Ethernet Frame:

            <prefix><dest><source><...><data><checksum>
	       8B     6B     6B    6B  46-1500B  4B

            prefix: 10101010 X7 + 10101011

            destination/source: MAC addresses

            ...: Information about frame type

            checksum: to ensure data integrity

         MTU

            Maximum Transmission Unit

            1500 Bytes for ethernet
